
CAT(1)                    BSD General Commands Manual                   CAT(1)

NNAAMMEE
     ccaatt -- concatenate and print files

SSYYNNOOPPSSIISS
     ccaatt [--bbeennssttuuvv] [_f_i_l_e _._._.]

DDEESSCCRRIIPPTTIIOONN
     The ccaatt utility reads files sequentially, writing them to the standard
     output.  The _f_i_l_e operands are processed in command-line order.  If _f_i_l_e
     is a single dash (`-') or absent, ccaatt reads from the standard input.  If
     _f_i_l_e is a UNIX domain socket, ccaatt connects to it and then reads it until
     EOF.  This complements the UNIX domain binding capability available in
     inetd(8).

     The options are as follows:

     --bb      Number the non-blank output lines, starting at 1.

     --ee      Display non-printing characters (see the --vv option), and display
             a dollar sign (`$') at the end of each line.

     --nn      Number the output lines, starting at 1.

     --ss      Squeeze multiple adjacent empty lines, causing the output to be
             single spaced.

     --tt      Display non-printing characters (see the --vv option), and display
             tab characters as `^I'.

     --uu      Disable output buffering.

     --vv      Display non-printing characters so they are visible.  Control
             characters print as `^X' for control-X; the delete character
             (octal 0177) prints as `^?'.  Non-ASCII characters (with the high
             bit set) are printed as `M-' (for meta) followed by the character
             for the low 7 bits.

EEXXIITT SSTTAATTUUSS
     The ccaatt utility exits 0 on success, and >0 if an error occurs.

EEXXAAMMPPLLEESS
     The command:

           cat file1

     will print the contents of _f_i_l_e_1 to the standard output.

     The command:

           cat file1 file2 > file3

     will sequentially print the contents of _f_i_l_e_1 and _f_i_l_e_2 to the file
     _f_i_l_e_3, truncating _f_i_l_e_3 if it already exists.  See the manual page for
     your shell (i.e., sh(1)) for more information on redirection.

     The command:

           cat file1 - file2 - file3

     will print the contents of _f_i_l_e_1, print data it receives from the stan-
     dard input until it receives an EOF (`^D') character, print the contents
     of _f_i_l_e_2, read and output contents of the standard input again, then
     finally output the contents of _f_i_l_e_3.  Note that if the standard input
     referred to a file, the second dash on the command-line would have no
     effect, since the entire contents of the file would have already been
     read and printed by ccaatt when it encountered the first `-' operand.

SSEEEE AALLSSOO
     head(1), more(1), pr(1), sh(1), tail(1), vis(1), zcat(1), setbuf(3)

     Rob Pike, "UNIX Style, or cat -v Considered Harmful", _U_S_E_N_I_X _S_u_m_m_e_r
     _C_o_n_f_e_r_e_n_c_e _P_r_o_c_e_e_d_i_n_g_s, 1983.

SSTTAANNDDAARRDDSS
     The ccaatt utility is compliant with the IEEE Std 1003.2-1992 (``POSIX.2'')
     specification.

     The flags [--bbeennssttvv] are extensions to the specification.

HHIISSTTOORRYY
     A ccaatt utility appeared in Version 1 AT&T UNIX.  Dennis Ritchie designed
     and wrote the first man page.  It appears to have been cat(1).

BBUUGGSS
     Because of the shell language mechanism used to perform output redirect-
     ion, the command ``cat file1 file2 > file1'' will cause the original data
     in file1 to be destroyed!

     The ccaatt utility does not recognize multibyte characters when the --tt or --vv
     option is in effect.

BSD                             March 21, 2004                             BSD

DATE(1)                   BSD General Commands Manual                  DATE(1)

NNAAMMEE
     ddaattee -- display or set date and time

SSYYNNOOPPSSIISS
     ddaattee [--jjuu] [--rr _s_e_c_o_n_d_s] [--vv [++|--]_v_a_l[_y_m_w_d_H_M_S]] _._._. [++_o_u_t_p_u_t___f_m_t]
     ddaattee [--jjnnuu] [[[_m_m]_d_d]_H_H]_M_M[[_c_c]_y_y][_._s_s]
     ddaattee [--jjnnuu] --ff _i_n_p_u_t___f_m_t _n_e_w___d_a_t_e [++_o_u_t_p_u_t___f_m_t]
     ddaattee [--dd _d_s_t] [--tt _m_i_n_u_t_e_s___w_e_s_t]

DDEESSCCRRIIPPTTIIOONN
     When invoked without arguments, the ddaattee utility displays the current
     date and time.  Otherwise, depending on the options specified, ddaattee will
     set the date and time or print it in a user-defined way.

     The ddaattee utility displays the date and time read from the kernel clock.
     When used to set the date and time, both the kernel clock and the hard-
     ware clock are updated.

     Only the superuser may set the date, and if the system securelevel (see
     securelevel(8)) is greater than 1, the time may not be changed by more
     than 1 second.

     The options are as follows:

     --dd _d_s_t  Set the kernel's value for daylight saving time.  If _d_s_t is non-
             zero, future calls to gettimeofday(2) will return a non-zero for
             _t_z___d_s_t_t_i_m_e.

     --ff      Use _i_n_p_u_t___f_m_t as the format string to parse the _n_e_w___d_a_t_e provided
             rather than using the default [[[_m_m]_d_d]_H_H]_M_M[[_c_c]_y_y][_._s_s] format.
             Parsing is done using strptime(3).

     --jj      Do not try to set the date.  This allows you to use the --ff flag
             in addition to the ++ option to convert one date format to
             another.

     --nn      By default, if the timed(8) daemon is running, ddaattee sets the time
             on all of the machines in the local group.  The --nn option sup-
             presses this behavior and causes the time to be set only on the
             current machine.

     --rr _s_e_c_o_n_d_s
             Print the date and time represented by _s_e_c_o_n_d_s, where _s_e_c_o_n_d_s is
             the number of seconds since the Epoch (00:00:00 UTC, January 1,
             1970; see time(3)), and can be specified in decimal, octal, or
             hex.

     --tt _m_i_n_u_t_e_s___w_e_s_t
             Set the system's value for minutes west of GMT.  _m_i_n_u_t_e_s___w_e_s_t
             specifies the number of minutes returned in _t_z___m_i_n_u_t_e_s_w_e_s_t by
             future calls to gettimeofday(2).

     --uu      Display or set the date in UTC (Coordinated Universal) time.

     --vv      Adjust (i.e., take the current date and display the result of the
             adjustment; not actually set the date) the second, minute, hour,
             month day, week day, month or year according to _v_a_l.  If _v_a_l is
             preceded with a plus or minus sign, the date is adjusted forwards
             or backwards according to the remaining string, otherwise the
             relevant part of the date is set.  The date can be adjusted as
             many times as required using these flags.  Flags are processed in
             the order given.

             When setting values (rather than adjusting them), seconds are in
             the range 0-59, minutes are in the range 0-59, hours are in the
             range 0-23, month days are in the range 1-31, week days are in
             the range 0-6 (Sun-Sat), months are in the range 1-12 (Jan-Dec)
             and years are in the range 80-38 or 1980-2038.

             If _v_a_l is numeric, one of either _y, _m, _w, _d, _H, _M or _S must be
             used to specify which part of the date is to be adjusted.

             The week day or month may be specified using a name rather than a
             number.  If a name is used with the plus (or minus) sign, the
             date will be put forwards (or backwards) to the next (previous)
             date that matches the given week day or month.  This will not
             adjust the date, if the given week day or month is the same as
             the current one.

             When a date is adjusted to a specific value or in units greater
             than hours, daylight savings time considerations are ignored.
             Adjustments in units of hours or less honor daylight saving time.
             So, assuming the current date is March 26, 0:30 and that the DST
             adjustment means that the clock goes forward at 01:00 to 02:00,
             using --vv +1H will adjust the date to March 26, 2:30.  Likewise,
             if the date is October 29, 0:30 and the DST adjustment means that
             the clock goes back at 02:00 to 01:00, using --vv +3H will be nec-
             essary to reach October 29, 2:30.

             When the date is adjusted to a specific value that does not actu-
             ally exist (for example March 26, 1:30 BST 2000 in the
             Europe/London timezone), the date will be silently adjusted for-
             wards in units of one hour until it reaches a valid time.  When
             the date is adjusted to a specific value that occurs twice (for
             example October 29, 1:30 2000), the resulting timezone will be
             set so that the date matches the earlier of the two times.

             Adjusting the date by months is inherently ambiguous because a
             month is a unit of variable length depending on the current date.
             This kind of date adjustment is applied in the most intuitive
             way.  First of all, ddaattee tries to preserve the day of the month.
             If it is impossible because the target month is shorter than the
             present one, the last day of the target month will be the result.
             For example, using --vv +1m on May 31 will adjust the date to June
             30, while using the same option on January 30 will result in the
             date adjusted to the last day of February.  This approach is also
             believed to make the most sense for shell scripting.  Neverthe-
             less, be aware that going forth and back by the same number of
             months may take you to a different date.

             Refer to the examples below for further details.

     An operand with a leading plus (`+') sign signals a user-defined format
     string which specifies the format in which to display the date and time.
     The format string may contain any of the conversion specifications
     described in the strftime(3) manual page, as well as any arbitrary text.
     A newline (`\n') character is always output after the characters speci-
     fied by the format string.  The format string for the default display is
     ``+%+''.

     If an operand does not have a leading plus sign, it is interpreted as a
     value for setting the system's notion of the current date and time.  The
     canonical representation for setting the date and time is:

           _c_c      Century (either 19 or 20) prepended to the abbreviated
                   year.
           _y_y      Year in abbreviated form (e.g., 89 for 1989, 06 for 2006).
           _m_m      Numeric month, a number from 1 to 12.
           _d_d      Day, a number from 1 to 31.
           _H_H      Hour, a number from 0 to 23.
           _M_M      Minutes, a number from 0 to 59.
           _s_s      Seconds, a number from 0 to 61 (59 plus a maximum of two
                   leap seconds).

     Everything but the minutes is optional.

     Time changes for Daylight Saving Time, standard time, leap seconds, and
     leap years are handled automatically.

EENNVVIIRROONNMMEENNTT
     The following environment variables affect the execution of ddaattee:

     TZ      The timezone to use when displaying dates.  The normal format is
             a pathname relative to _/_u_s_r_/_s_h_a_r_e_/_z_o_n_e_i_n_f_o.  For example, the
             command ``TZ=America/Los_Angeles date'' displays the current time
             in California.  See environ(7) for more information.

FFIILLEESS
     /var/log/messages  record of the user setting the time

EEXXIITT SSTTAATTUUSS
     The ddaattee utility exits 0 on success, 1 if unable to set the date, and 2
     if able to set the local date, but unable to set it globally.

EEXXAAMMPPLLEESS
     The command:

           date "+DATE: %Y-%m-%d%nTIME: %H:%M:%S"

     will display:

           DATE: 1987-11-21
           TIME: 13:36:16

     In the Europe/London timezone, the command:

           date -v1m -v+1y

     will display:

           Sun Jan  4 04:15:24 GMT 1998

     where it is currently Mon Aug  4 04:15:24 BST 1997.

     The command:

           date -v1d -v3m -v0y -v-1d

     will display the last day of February in the year 2000:

           Tue Feb 29 03:18:00 GMT 2000

     So will do the command:

           date -v30d -v3m -v0y -v-1m

     because there is no such date as the 30th of February.

     The command:

           date -v1d -v+1m -v-1d -v-fri

     will display the last Friday of the month:

           Fri Aug 29 04:31:11 BST 1997

     where it is currently Mon Aug  4 04:31:11 BST 1997.

     The command:

           date 0613162785

     sets the date to ``June 13, 1985, 4:27 PM''.

           date "+%m%d%H%M%Y.%S"

     may be used on one machine to print out the date suitable for setting on
     another.

     The command:

           date 1432

     sets the time to 2:32 PM, without modifying the date.

     Finally the command:

           date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s"

     can be used to parse the output from ddaattee and express it in Epoch time.

DDIIAAGGNNOOSSTTIICCSS
     Occasionally, when timed(8) synchronizes the time on many hosts, the set-
     ting of a new time value may require more than a few seconds.  On these
     occasions, ddaattee prints: `Network time being set'.  The message
     `Communication error with timed' occurs when the communication between
     ddaattee and timed(8) fails.

LLEEGGAACCYY SSYYNNOOPPSSIISS
     As above, except for the second line, which is:

     ddaattee [--jjnnuu] [[[[[_c_c]_y_y]_m_m]_d_d]_H_H]_M_M[_._s_s]

LLEEGGAACCYY DDIIAAGGNNOOSSTTIICCSS
     When invoked in legacy mode, the following exit values are returned:
     0  The date was written successfully
     1  Unable to set the date
     2  Able to set the local date, but unable to set it globally

     For more information about legacy mode, see compat(5).

SSEEEE AALLSSOO
     gettimeofday(2), strftime(3), strptime(3), utmpx(5), timed(8)

     R. Gusella and S. Zatti, _T_S_P_: _T_h_e _T_i_m_e _S_y_n_c_h_r_o_n_i_z_a_t_i_o_n _P_r_o_t_o_c_o_l _f_o_r _U_N_I_X
     _4_._3_B_S_D.

SSTTAANNDDAARRDDSS
     The ddaattee utility is expected to be compatible with IEEE Std 1003.2
     (``POSIX.2'').

HHIISSTTOORRYY
     A ddaattee command appeared in Version 1 AT&T UNIX.

BSD                             August 16, 2007                            BSD

CAL(1)                    BSD General Commands Manual                   CAL(1)

NNAAMMEE
     ccaall, nnccaall -- displays a calendar and the date of easter

SSYYNNOOPPSSIISS
     ccaall [--jjyy] [[_m_o_n_t_h] _y_e_a_r]
     ccaall [--jj] --mm _m_o_n_t_h [_y_e_a_r]
     nnccaall [--jjJJppwwyy] [--ss _c_o_u_n_t_r_y___c_o_d_e] [[_m_o_n_t_h] _y_e_a_r]
     nnccaall [--JJeeoo] [_y_e_a_r]

DDEESSCCRRIIPPTTIIOONN
     The ccaall utility displays a simple calendar in traditional format and nnccaall
     offers an alternative layout, more options and the date of easter.  The
     new format is a little cramped but it makes a year fit on a 25x80 termi-
     nal.  If arguments are not specified, the current month is displayed.

     The options are as follows:

     --JJ      Display Julian Calendar, if combined with the --ee option, display
             date of easter according to the Julian Calendar.

     --ee      Display date of easter (for western churches).

     --jj      Display Julian days (days one-based, numbered from January 1).

     --mm _m_o_n_t_h
             Display the specified _m_o_n_t_h.

     --oo      Display date of orthodox easter (Greek and Russian Orthodox
             Churches).

     --pp      Print the country codes and switching days from Julian to Grego-
             rian Calendar as they are assumed by nnccaall.  The country code as
             determined from the local environment is marked with an asterisk.

     --ss _c_o_u_n_t_r_y___c_o_d_e
             Assume the switch from Julian to Gregorian Calendar at the date
             associated with the _c_o_u_n_t_r_y___c_o_d_e.  If not specified, nnccaall tries
             to guess the switch date from the local environment or falls back
             to September 2, 1752.  This was when Great Britain and her
             colonies switched to the Gregorian Calendar.

     --ww      Print the number of the week below each week column.

     --yy      Display a calendar for the specified year.

     A single parameter specifies the year (1 - 9999) to be displayed; note
     the year must be fully specified: ``cal 89'' will _n_o_t display a calendar
     for 1989.  Two parameters denote the month and year; the month is either
     a number between 1 and 12, or a full or abbreviated name as specified by
     the current locale.  Month and year default to those of the current sys-
     tem clock and time zone (so ``cal -m 8'' will display a calendar for the
     month of August in the current year).

     A year starts on Jan 1.

SSEEEE AALLSSOO
     calendar(3), strftime(3)

HHIISSTTOORRYY
     A ccaall command appeared in Version 5 AT&T UNIX.  The nnccaall command appeared
     in FreeBSD 2.2.6.

AAUUTTHHOORRSS
     The nnccaall command and manual were written by Wolfgang Helbig
     <helbig@FreeBSD.org>.

BBUUGGSS
     The assignment of Julian--Gregorian switching dates to country codes is
     historically naive for many countries.

BSD                            November 23, 2004                           BSD

TOUCH(1)                  BSD General Commands Manual                 TOUCH(1)

NNAAMMEE
     ttoouucchh -- change file access and modification times

SSYYNNOOPPSSIISS
     ttoouucchh [--AA _[_-_]_[_[_h_h_]_m_m_]_S_S] [--aaccffhhmm] [--rr _f_i_l_e] [--tt _[_[_C_C_]_Y_Y_]_M_M_D_D_h_h_m_m_[_._S_S_]]
           _f_i_l_e _._._.

DDEESSCCRRIIPPTTIIOONN
     The ttoouucchh utility sets the modification and access times of files.  If
     any file does not exist, it is created with default permissions.

     By default, ttoouucchh changes both modification and access times.  The --aa and
     --mm flags may be used to select the access time or the modification time
     individually.  Selecting both is equivalent to the default.  By default,
     the timestamps are set to the current time.  The --tt flag explicitly spec-
     ifies a different time, and the --rr flag specifies to set the times those
     of the specified file.  The --AA flag adjusts the values by a specified
     amount.

     The following options are available:

     --AA      Adjust the access and modification time stamps for the file by
             the specified value.  This flag is intended for use in modifying
             files with incorrectly set time stamps.

             The argument is of the form ``[-][[hh]mm]SS'' where each pair of
             letters represents the following:

                   _-       Make the adjustment negative: the new time stamp is
                           set to be before the old one.
                   _h_h      The number of hours, from 00 to 99.
                   _m_m      The number of minutes, from 00 to 59.
                   _S_S      The number of seconds, from 00 to 59.

             The --AA flag implies the --cc flag: if any file specified does not
             exist, it will be silently ignored.

     --aa      Change the access time of the file.  The modification time of the
             file is not changed unless the --mm flag is also specified.

     --cc      Do not create the file if it does not exist.  The ttoouucchh utility
             does not treat this as an error.  No error messages are displayed
             and the exit value is not affected.

     --ff      Attempt to force the update, even if the file permissions do not
             currently permit it.

     --hh      If the file is a symbolic link, change the times of the link
             itself rather than the file that the link points to.  Note that
             --hh implies --cc and thus will not create any new files.

     --mm      Change the modification time of the file.  The access time of the
             file is not changed unless the --aa flag is also specified.

     --rr      Use the access and modifications times from the specified file
             instead of the current time of day.

     --tt      Change the access and modification times to the specified time
             instead of the current time of day.  The argument is of the form
             ``[[CC]YY]MMDDhhmm[.SS]'' where each pair of letters represents
             the following:

                   _C_C      The first two digits of the year (the century).
                   _Y_Y      The second two digits of the year.  If ``YY'' is
                           specified, but ``CC'' is not, a value for ``YY''
                           between 69 and 99 results in a ``CC'' value of 19.
                           Otherwise, a ``CC'' value of 20 is used.
                   _M_M      The month of the year, from 01 to 12.
                   _D_D      the day of the month, from 01 to 31.
                   _h_h      The hour of the day, from 00 to 23.
                   _m_m      The minute of the hour, from 00 to 59.
                   _S_S      The second of the minute, from 00 to 61.

             If the ``CC'' and ``YY'' letter pairs are not specified, the val-
             ues default to the current year.  If the ``SS'' letter pair is
             not specified, the value defaults to 0.

EEXXIITT SSTTAATTUUSS
     The ttoouucchh utility exits 0 on success, and >0 if an error occurs.

CCOOMMPPAATTIIBBIILLIITTYY
     The obsolescent form of ttoouucchh, where a time format is specified as the
     first argument, is supported.  When no --rr or --tt option is specified,
     there are at least two arguments, and the first argument is a string of
     digits either eight or ten characters in length, the first argument is
     interpreted as a time specification of the form ``MMDDhhmm[YY]''.

     The ``MM'', ``DD'', ``hh'' and ``mm'' letter pairs are treated as their
     counterparts specified to the --tt option.  If the ``YY'' letter pair is in
     the range 39 to 99, the year is set to 1939 to 1999, otherwise, the year
     is set in the 21st century.

SSEEEE AALLSSOO
     utimes(2)

SSTTAANNDDAARRDDSS
     The ttoouucchh utility is expected to be a superset of the IEEE Std 1003.2
     (``POSIX.2'') specification.

HHIISSTTOORRYY
     A ttoouucchh utility appeared in Version 7 AT&T UNIX.

BSD                             April 28, 1995                             BSD
